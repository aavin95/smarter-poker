generator client {
  provider = "prisma-client-js"
}
 
datasource db {
  provider = "postgresql"
  // Uses connection pooling
  url = env("POSTGRES_PRISMA_URL")
  // or you'll have dangling databases from migrations
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  balance       Float @default(0)
  numGamesPlayed Int @default(0)
  numGamesWon   Int @default(0)  
  gameId        String?
  currentGame   Game? @relation("PlayerGames", fields: [gameId], references: [id])
  hands         Hand[]
  bets          Bet[]
  currentBet    Int @default(0)
  folded        Boolean @default(false)
}

model Hand {
  id            String  @id @default(cuid())
  gameId        String
  playerId      String
  state         String   @default("inProgress")
  cards         String[]
  bettingRound  Int      @default(0)
  player        User     @relation(fields: [playerId], references: [id])
  game          Game     @relation(fields: [gameId], references: [id])
}

model Game {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  state         String   @default("waiting")
  players       User[]   @relation("PlayerGames")
  hands         Hand[]
  bets          Bet[]
  dealer        Int      @default(0)
  playerOnClock Int      @default(0)
  tableCards    String[]
  bigBlind      Int      @default(20)
  smallBlind    Int      @default(10)
  pot           Int      @default(0)
  currentBet    Int      @default(20)
  currentTurn   Int      @default(0)
  round         String   @default("waitingForStart")
  usedCards     String[] @default([])
}

model Bet {
  id        String @id @default(cuid())
  createdAt DateTime @default(now())
  gameId    String
  playerId  String
  amount    Int
  round     Int
  player    User  @relation(fields: [playerId], references: [id])
  game      Game  @relation(fields: [gameId], references: [id])
}


// NextAuth stuff
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
